#ifndef IOUTILS_H
#define IOUTILS_H

#include <mpi.h>


void read_header(const char* fname , int* params);

inline void write_header(const char* fname, const int xsize, const int ysize, const int maxval, int* offset)
{
    FILE* image_file;
    image_file = fopen(fname,"w");
    if (!image_file){
        printf("Unable to open file '%s'. Aborting.",fname);
    }
    fprintf(image_file,"P5\n# generated by\n# Gabriele Codega\n%d %d\n%d\n",xsize,ysize,maxval);
    *offset = ftell(image_file);

    fclose(image_file);
}

inline void 
write_checkpoint(char* fname, const int step, const char* grid,
                const int procrank, const int procoffset, const int procwork,
                const int xsize, const int ysize, const int maxval)
{
    snprintf(fname,26,"imgs/checkpoint_%05d.pgm",step) >= 26 ? abort() : (void)0;
    MPI_File fhout;
    int writeoffset;

    #pragma omp single copyprivate(fhout,writeoffset)
    {
        if(procrank == 0){
            write_header(fname,xsize,ysize,maxval,&writeoffset);
        }
        MPI_Barrier(MPI_COMM_WORLD);

        MPI_Bcast(&writeoffset, 1, MPI_INT, 0, MPI_COMM_WORLD);

        MPI_File_open(MPI_COMM_WORLD,fname,MPI_MODE_WRONLY,MPI_INFO_NULL,&fhout);
        MPI_Offset start;
        MPI_File_get_position_shared(fhout,&start);
        MPI_Barrier(MPI_COMM_WORLD);

        writeoffset += start;
    }

    MPI_Status status;
    #pragma omp master
        MPI_File_write_at_all(fhout,writeoffset+procoffset, (void*)(grid),procwork,MPI_BYTE,&status);

    #pragma omp barrier
    #pragma omp single
        MPI_File_close(&fhout);
}



#endif